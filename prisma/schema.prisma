generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @unique @default(autoincrement())
  username     String @unique
  password String
  role     String
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int @unique

}

model Employee {
  id            Int        @id @default(autoincrement())
  employeeId    String     @unique @default(uuid())
  email         String?    @unique 
  contactNumber String?    @unique
  firstName     String
  middleName    String?
  lastName      String
  streetAddress String
  barangay      String
  province      String
  city          String
  country       String
  zipCode       String
  status        String     // Active, Resigned, AWOL
  position      Position   @relation(fields: [positionId], references: [id])
  positionId    Int
  basicPay    Float
  incomeTax   Float?
  earnings      Earnings[]
  deductions    Deduction[]
  PayrollHistory Payroll[]
  SalaryHistory  Salary[] 
  LeaveHistory   Leave[]
  user           User?     
}

model Position {
  id           Int          @id @unique @default(autoincrement())
  title        String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId Int
  employees    Employee[]
}

model Department {
  id          Int         @id @unique @default(autoincrement())
  name        String
  positions   Position[]
}

model Earnings {
  id           Int       @id @unique @default(autoincrement())
  employee     Employee  @relation(fields: [employeeId], references: [id])
  employeeId   Int
  earningType  String
  value        Float
}

// Define the Deductions table
model Deduction {
  id            Int       @id @unique @default(autoincrement())
  employee      Employee  @relation(fields: [employeeId], references: [id])
  employeeId    Int
  deductionType String
  value         Float
}

// Define the Payroll table
model Payroll {
  id             Int        @id @unique @default(autoincrement())
  payrollNumber  String     @unique @default(uuid())
  employeeId     Int        
  employee   Employee @relation(fields: [employeeId], references: [id])
  incomeTax      Float
  sss            Float
  philhealth     Float
  pagibig        Float
  totalEarnings  Float?
  totalDeductions Float?
  startDate      DateTime
  endDate        DateTime
  netPay         Float
  createdAt      DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}


model Salary {
  id             Int        @id @unique @default(autoincrement())
  employee       Employee   @relation(fields: [employeeId], references: [id])
  employeeId     Int
  basicPay       Float
  incomeTax      Float
  createdAt      DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Leave {
  id          Int       @id @unique @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  leaveType   String
  startDate   DateTime
  endDate     DateTime
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
